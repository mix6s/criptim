<?php
/**
 * Created by PhpStorm.
 * User: mix6s
 * Date: 06.01.2018
 * Time: 20:18
 */

namespace Domain\Tests\UseCase\PayDepositInvoice;


use Domain\Entity\DepositInvoice;
use Domain\Tests\Container;
use Domain\Tests\UseCaseTestCase;
use Domain\UseCase;
use Domain\ValueObject\BillingIdentity;
use Domain\ValueObject\BillingInvoice;
use Domain\ValueObject\DepositMoney;
use Domain\ValueObject\DepositPayMethod;
use Money\Money;

class HandlerTest extends UseCaseTestCase
{
	/** @var  Container */
	private $container;

	public function setUp()
	{
		parent::setUp(); // TODO: Change the autogenerated stub
		$this->container = new Container();
	}

	public function testHandle()
	{
		$investor = $this->container->getCreateInvestorUseCaseHandler()->handle()->getInvestor();
		$method = DepositPayMethod::cc();
		$sum = new DepositMoney(Money::RUB(500));

		$invoice = $this->container->getCreateDepositInvoiceUseCaseHandler()->handle(
			new UseCase\CreateDepositInvoice\Request(
				$investor->getId(),
				$sum,
				$method
			)
		)->getDepositInvoice();

		$billingIdentity = new BillingIdentity('1');

		$response = $this->container->getPayDepositInvoiceUseCaseHandler()->handle(
			new UseCase\PayDepositInvoice\Request(
				new BillingInvoice($billingIdentity, $invoice->getId(), $sum, Money::RUB(10))
			)
		);
		$this->assertInstanceOf(UseCase\PayDepositInvoice\Response::class, $response);
		$this->assertInstanceOf(DepositInvoice::class, $response->getDepositInvoice());
		$this->assertEquals($invoice->getId(), $response->getDepositInvoice()->getId());
		$this->assertEquals(DepositInvoice::STATUS_PAYED, $response->getDepositInvoice()->getStatus());
	}
}