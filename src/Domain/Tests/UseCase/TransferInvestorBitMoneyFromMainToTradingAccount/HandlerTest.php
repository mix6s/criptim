<?php
/**
 * Created by PhpStorm.
 * User: mix6s
 * Date: 10.01.18
 * Time: 22:03
 */

namespace Domain\Tests\UseCase\TransferInvestorBitMoneyFromMainToTradingAccount;


use Domain\Tests\Container;
use Domain\Tests\Policy\SimpleDepositToBitMoneyPolicy;
use Domain\Tests\UseCaseTestCase;
use Domain\UseCase;
use Domain\ValueObject\BillingIdentity;
use Domain\ValueObject\BillingInvoice;
use Domain\ValueObject\BitMoney;
use Domain\ValueObject\DepositMoney;
use Domain\ValueObject\DepositPayMethod;
use Money\Money;

class HandlerTest extends UseCaseTestCase
{
    /** @var  Container */
    private $container;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->container = new Container();
    }

    public function testHandle()
	{
		$investor = $this->container->getCreateInvestorUseCaseHandler()->handle()->getInvestor();
		$method = DepositPayMethod::cc();
		$sum = new DepositMoney(Money::RUR('100000000'));

		$invoice = $this->container->getCreateDepositInvoiceUseCaseHandler()->handle(
			new UseCase\CreateDepositInvoice\Request(
				$investor->getId(),
				$sum,
				$method
			)
		)->getDepositInvoice();

		$billingIdentity = new BillingIdentity('1');

		$response = $this->container->getPayDepositInvoiceUseCaseHandler()->handle(
			new UseCase\PayDepositInvoice\Request(
				new BillingInvoice($billingIdentity, $invoice->getId(), $sum, Money::RUR(10))
			)
		);
		$depositPolicy = new SimpleDepositToBitMoneyPolicy();
		$bitMoney = $depositPolicy->convert($sum);
		$account = $this->container->getFindInvestorAccountUseCaseHandler()->handle(new UseCase\FindInvestorAccount\Request(
			$investor->getId(),
			$bitMoney->getCurrency()
		))->getInvestorAccount();

		$this->assertEquals($bitMoney, $account->getMainBalance());
		$this->assertEquals(new BitMoney(Money::BTC(0)), $account->getTradingBalance());
		$response = $this->container->getTransferToTradingAccountUseCase()->handle(
			new UseCase\TransferInvestorBitMoneyFromMainToTradingAccount\Request(
				$account->getId()
			)
		);
		$this->assertEquals($bitMoney, $account->getTradingBalance());
		$this->assertEquals(new BitMoney(Money::BTC(0)), $account->getMainBalance());
	}
}